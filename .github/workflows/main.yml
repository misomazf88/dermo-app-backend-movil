name: CI/CD Pipeline
on:
  push:
    branches: [ feature/IniciarSesion ]
  pull_request:
    branches: [ feature/IniciarSesion ]
  workflow_dispatch:
jobs:    
  unit-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.7
        env:
          POSTGRES_HOST: localhost:5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: millonarios10
          POSTGRES_DB: dermo-diagnostic-db
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 2s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        
      - name: Run tests
        run: ./gradlew clean test
        env:
          POSTGRES_HOST: localhost:5432
          POSTGRES_DB: dermo-diagnostic-db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: millonarios10

      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: unit_test_report
          path: app/build/reports/tests/testDebugUnitTest/
          
      - name: Validar resultado error
        if: ${{ failure() }}
        env:
         MENSAJE_ERROR: No se puede realizar el merge porque FALLO una o más pruebas unitarias
        run: echo "::set-output name=respuesta::${MENSAJE_ERROR}"
        
      - name: Validar resultado exitoso
        if: ${{ success() }}
        env:
          MENSAJE_EXITO: El resultado de las pruebas unitarias fue exitoso
        run: echo "::set-output name=respuesta::${MENSAJE_EXITO}"
          
  static-code-analysis:
    needs: [unit-test]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.7
        env:
          POSTGRES_HOST: localhost:5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: millonarios10
          POSTGRES_DB: dermo-diagnostic-db
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 2s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        
      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      - name: set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
          
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_CI }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonarqube --info

      - name: Validar resultado error
        if: ${{ failure() }}
        env:
         MENSAJE_ERROR: No se puede realizar el merge porque FALLO la revisión de código estático
        run: echo "::set-output name=respuesta::${MENSAJE_ERROR}"
        
      - name: Validar resultado exitoso
        if: ${{ success() }}
        env:
          MENSAJE_EXITO: El resultado del análisis estático fue exitoso
        run: echo "::set-output name=respuesta::${MENSAJE_EXITO}"
        
  quality-gate:
    needs: [static-code-analysis]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting.
        fetch-depth: 0

    # Triggering SonarQube analysis as results of it are required by Quality Gate check.
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@"${GITHUB_REF#refs/heads/}.${GITHUB_SHA}"
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: https://sonarcloud.io/project/branches_list?id=misomazf88_dermo-app-backend-movil

    # Check the Quality Gate status.
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@"${GITHUB_REF#refs/heads/}.${GITHUB_SHA}"
      # Force to fail step after specific time.
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    # Optionally you can use the output from the Quality Gate in another step.
    # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
    - name: "Example show SonarQube Quality Gate Status value"
      run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
